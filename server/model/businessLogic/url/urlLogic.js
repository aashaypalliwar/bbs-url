const mongoose = require('mongoose');
const URL = require('../../dbModel/urlModel');
const showError = require('../../../utils/middleware').showError;
const validateSuborgUrlUpdate = require('./urlUtils').validateSuborgUrlUpdate;
const dnsCheck = require('./urlUtils').dnsCheck;
const generateEndpoint = require('./urlUtils').generateEndpoint;

// Get all the URLs
const getAllURLs = async () => {
    try {
        let urlList = await URL.find().lean();
        return urlList;
    }
    catch(err){
        showError(err);
    }
};

// Get all URLs generated by a given user
const getURLsByUser = async (user) => {
    try {
        let urlList = await URL.find({userID: user._id}).lean();
        return urlList;
    }
    catch(err){
        showError(err);
    }
};

// Blacklist a URL
const blacklistURL = async (url) => {
    try{
        let updatedInfo = await URL.findByIdAndUpdate(url._id, {
           blacklisted: true
        });
        return updatedInfo;
    }
    catch (err) {
        showError(err);
    }
}

// Whitelist a URL
const whitelistURL = async (url) => {
    try{
        let updatedInfo = await URL.findByIdAndUpdate(url._id, {
            blacklisted: false
        });
        return updatedInfo;
    }
    catch (err) {
        showError(err);
    }
}

//Delete url
const deleteURL = async (url) => {
    try{
        await URL.deleteOne({ _id: url._id});
        console.log(`deleted url with id : ${url._id}`);
    }
    catch(err){
        showError(err);
    }
}

// Get redirect URL
const getRedirectURL = async (endpoint) => {
    try {
        let urlData = await URL.findOne({shortURLEndPoint: endpoint}).lean();
        let urlObj = {
            shortURLEndPoint: endpoint,
            originalURL: null
        };
        if(urlData !== null)
            urlObj = {
                shortURLEndPoint: endpoint,
                originalURL: urlData.originalURL
            };
        return urlObj;
    }
    catch(err){
        showError(err);
    }
}

//Increment hits on URL
const incrementURLHits = async (url) => {
    try{
        let updatedURLInfo = await URL.findOneAndUpdate(
            { _id: url._id},
            { $inc: { hits: 1 }  },
            {new: true});
        return updatedURLInfo;
    }
    catch(err){
        showError(err);
    }
};

//Update custom URL (sub-organization)
const updateSuborgURL = async (url, newEndpoint) => {
    try{
        let isValid = validateSuborgUrlUpdate(url.suborg, newEndpoint);
        if(isValid){
            let updatedURLInfo = await URL.findOneAndUpdate(
                { _id: url._id},
                { shortURLEndPoint: newEndpoint },
                {new: true});
            return updatedURLInfo;
        }
    }
    catch(err){
        showError(err);
    }
}

//Create a new short URL
const createNewShortURL = async (url) => {
    try{

        let isValid = await dnsCheck(url.originalURL);
        if(!isValid){
            console.log('not valid');
            return;
        }

        let shortURLEndPoint = await generateEndpoint();

        let newURL = new URL(
            {
                email: url.email,
                name: url.name,
                userID: url.userID,
                suborg: url.suborg,
                shortURLEndPoint: shortURLEndPoint,
                originalURL: url.originalURL,
            });
        let newURLData = await newURL.save();
        return newURLData;
    }
    catch(err){
        showError(err);
    }
};

module.exports = {
    getAllURLs,
    getURLsByUser,
    blacklistURL,
    whitelistURL,
    deleteURL,
    getRedirectURL,
    incrementURLHits,
    updateSuborgURL,
    createNewShortURL
};
